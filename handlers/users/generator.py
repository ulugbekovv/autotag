from aiogram import types
from states.states import MainState
from loader import dp
import re
from aiogram.dispatcher import FSMContext
from keyboards.inline import inline
from keyboards.default import main_menu
from handlers.users.start import bot_start


async def replace_russian_with_english(text):
    russian_letters = {'—É': 'y', '—Ä': 'p', '–æ': 'o', '–Ω': 'n', '–µ': 'e', '–∫': 'k', '–∞': 'a', '—Ç': 't', '–∏': 'i', '—Å': 'c', '–≤': 'b', '–º': 'm', '—Ö': 'x'}
    for russian, english in russian_letters.items():
        text = text.replace(russian, english)
    return text


def check_def(car_number):
    pattern = r'^[–ê-–Ø]{1}\d{3}[–ê-–Ø]{2}\d{2,3}$'

    if re.match(pattern, car_number):
        return True
    else:
        return False


def check_cop(car_number):
    pattern = r'^[–ê-–Ø]\d{4}[–ê-–Ø]{2}\d{2,3}$'

    if re.match(pattern, car_number):
        return True
    else:
        return False


@dp.message_handler(state=MainState.type)
async def typemsg(message: types.Message, state: FSMContext):
    type = message.text
    if type == '‚Äçüë®‚Äçüíº–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π':
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–≤—Ç–æ–Ω–æ–º–µ—Ä –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞\n\n<b><i>–ü—Ä–∏–º–µ—Ä:</i></b> –ê001–ú–†97", reply_markup=main_menu.cancel)
        await MainState.number_def.set()
    if type == 'üëÆ‚Äç‚ôÇÔ∏è–ü–æ–ª–∏—Ü–∏—è':
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–≤—Ç–æ–Ω–æ–º–µ—Ä –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞\n\n<b><i>–ü—Ä–∏–º–µ—Ä:</i></b> –ê000177", reply_markup=main_menu.cancel)
        await MainState.number_cop.set()
    if type == 'üíº–î–∏–ø–ª–æ–º–∞—Ç—ã':
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–≤—Ç–æ–Ω–æ–º–µ—Ä –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞\n\n<b><i>–ü—Ä–∏–º–µ—Ä:</i></b> 001CD177", reply_markup=main_menu.cancel)
        await MainState.number_dip.set()
    if type == 'üéñ–í–æ–µ–Ω–Ω—ã–µ':
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–≤—Ç–æ–Ω–æ–º–µ—Ä –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞\n\n<b><i>–ü—Ä–∏–º–µ—Ä:</i></b> 0001–º–æ77", reply_markup=main_menu.cancel)
        await MainState.number_voe.set()


@dp.message_handler(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", state="*")
async def cancelo(message: types.Message, state: FSMContext):
    await state.finish()
    await bot_start(message)


@dp.message_handler(state=MainState.number_def)
async def numsg(message: types.Message, state: FSMContext):
    num = message.text
    correct = check_def(num)
    try:
        num = message.text.lower()
        num = await replace_russian_with_english(num)
        link = f'https://migalki.net/informer/1/800/{num}.png'
        await message.answer_photo(link, caption="<b><i>ü§ô–†–µ–∑—É–ª—å—Ç–∞—Ç!\n\nüòá–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–µ—Ä. –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</i></b>", reply_markup=inline.rate)
        await state.finish()
    except:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ–Ω–æ–º–µ—Ä–∞! –°–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É: –ê001–ú–†97")


@dp.message_handler(state=MainState.number_cop)
async def numsg(message: types.Message, state: FSMContext):
    num = message.text
    correct = check_cop(num)
    try:
        num = message.text.lower()
        num = await replace_russian_with_english(num)
        link = f'https://migalki.net/informer/2/800/{num}.png'
        await message.answer_photo(link, caption="<b><i>ü§ô–†–µ–∑—É–ª—å—Ç–∞—Ç!\n\nüòá–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–µ—Ä. –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</i></b>", reply_markup=inline.rate)
        await state.finish()
    except:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ–Ω–æ–º–µ—Ä–∞! –°–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É: –ê000177")


@dp.message_handler(state=MainState.number_dip)
async def numsg(message: types.Message, state: FSMContext):
    try:
        num = message.text.lower()
        link = f'https://migalki.net/informer/3/800/{num}.png'
        await message.answer_photo(link, caption="<b><i>ü§ô–†–µ–∑—É–ª—å—Ç–∞—Ç!\n\nüòá–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–µ—Ä. –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</i></b>", reply_markup=inline.rate)
        await state.finish()
    except:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ–Ω–æ–º–µ—Ä–∞! –°–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É: 001CD177")


@dp.message_handler(state=MainState.number_voe)
async def numsg(message: types.Message, state: FSMContext):
    try:
        num = message.text.lower()
        num = await replace_russian_with_english(num)
        link = f'https://migalki.net/informer/4/800/{num}.png'
        await message.answer_photo(link, caption="<b><i>ü§ô–†–µ–∑—É–ª—å—Ç–∞—Ç!\n\nüòá–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–µ—Ä. –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</i></b>", reply_markup=inline.rate)
        await state.finish()
    except:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ–Ω–æ–º–µ—Ä–∞! –°–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É: 0001–º–æ77")

